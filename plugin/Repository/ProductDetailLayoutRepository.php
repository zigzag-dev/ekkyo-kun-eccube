<?php

namespace Plugin\SSProductDetailPage\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Entity\Master\DeviceType;
use Eccube\Entity\PageLayout;
use Symfony\Component\Filesystem\Filesystem;

/**
 * ProductDetailLayoutRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductDetailLayoutRepository extends EntityRepository
{
    
    protected $app;
    
    public function setApplication($app)
    {
        $this->app = $app;
    }
    
    public function findUnusedBlocks(DeviceType $DeviceType, $pageId)
    {
        $em = $this->getEntityManager();
        $blockRepo = $em->getRepository('Plugin\SSProductDetailPage\Entity\Block');
        $ids = array();
        try {
            $ownBlockPositions = $this->get($DeviceType, $pageId)->getProductDetailBlockPositions();
            foreach ($ownBlockPositions as $ownBlockPosition) {
                $ids[] = $ownBlockPosition->getBlock()->getId();
            }
        } catch (\Exception $e) {
        }
    
        # $idsが空配列だと、$ids以外のblockを取得するSQLが生成されないため、存在しないidを入れる
        if (empty($ids)) {
            $ids[] = \Eccube\Entity\Block::UNUSED_BLOCK_ID;
        }

        return $blockRepo->createQueryBuilder('b')
        ->where('b.id not in (:ids)')
        ->setParameter(':ids', $ids)
        ->getQuery()
        ->getResult();
    }
    
    public function get(DeviceType $DeviceType, $pageId)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.ProductDetailBlockPositions', 'bp', 'WITH', 'p.page_id = bp.page_id')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND p.page_id = :pageId')
            ->addOrderBy('bp.target_id', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');
    
        $ownResult = $qb
            ->getQuery()
            ->setParameters(array(
                'DeviceType'  => $DeviceType,
                'pageId'        => $pageId,
            ))
            ->getSingleResult();
    
        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.ProductDetailBlockPositions', 'bp', 'WITH', 'p.page_id = bp.page_id')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND bp.anywhere = 1')
            ->addOrderBy('bp.target_id', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');
    
        $anyResults = $qb
            ->getQuery()
            ->setParameters(array(
                'DeviceType' => $DeviceType,
            ))
            ->getResult();
    
        $OwnBlockPosition = $ownResult->getProductDetailBlockPositions();
        foreach ($anyResults as $anyResult) {
            $BlockPositions = $anyResult->getProductDetailBlockPositions();
            foreach ($BlockPositions as $BlockPosition) {
                if (!$OwnBlockPosition->contains($BlockPosition)) {
                    $ownResult->addBlockPosition($BlockPosition);
                }
            }
        }
    
        return $ownResult;
    
    }
    
    /**
     * @param DeviceType $DeviceType
     * @param unknown $pageId
     * @return \Plugin\SSProductDetailPage\Entity\ProductDetailLayout
     */
    public function newPageLayout(DeviceType $DeviceType, $pageId)
    {
        $PageLayout = new \Plugin\SSProductDetailPage\Entity\ProductDetailLayout();
        $PageLayout
            ->setPageId($pageId)
            ->setDeviceTypeId($DeviceType->getId())
            ->setDeviceType($DeviceType)
            ->setEditFlg(PageLayout::EDIT_FLG_USER);
    
        return $PageLayout;
    }
    
    public function findOrCreate($page_id, DeviceType $DeviceType)
    {
        if (is_null($page_id)) {
            $PageLayout = $this->newPageLayout($DeviceType);
            return $PageLayout;
        } else {
            return $this->get($DeviceType, $page_id);
        }
    }
    
    /**
     * ページの属性を取得する.
     *
     * この関数は, dtb_pagelayout の情報を検索する.
     * $deviceTypeId は必須. デフォルト値は DEVICE_TYPE_PC.
     *
     * @access public
     * @param  \Eccube\Entity\Master\DeviceType  $DeviceType 端末種別ID
     * @param  string                            $where 追加の検索条件
     * @param  string[]                          $parameters 追加の検索パラメーター
     * @return array                             ページ属性の配列
     */
    public function getPageDetail(DeviceType $DeviceType, $where = null, $parameters = array())
    {
        $qb = $this->createQueryBuilder('l')
            ->orderBy('l.page_id', 'DESC')
            ->where('l.DeviceType = :DeviceType')
            ->setParameter('DeviceType', $DeviceType)
            ->andWhere('l.page_id <> 0')
            ->orderBy('l.page_id', 'ASC');
        if (!is_null($where)) {
            $qb->andWhere($where);
            foreach ($parameters as $key => $val) {
                $qb->setParameter($key, $val);
            }
        }
    
        $PageLayouts = $qb
        ->getQuery()
        ->getResult();
    
        return $PageLayouts;
    }
    
    /**
     * 書き込みパスの取得
     * User定義の場合： /html/user_data
     * そうでない場合： /app/template/{template_code}
     *
     * @param  boolean $isUser
     * @return string
     */
    public function getWriteTemplatePath($isUser = false)
    {
        return ($isUser) ? $this->app['config']['user_data_realdir'] : $this->app['config']['template_realdir'];
    }
    
    /**
     * 読み込みファイルの取得
     *
     * 1. template_realdir
     *      app/template/{template_code}
     * 2. template_default_readldir
     *      src/Eccube/Resource/template/default
     *
     * @param string $fileName
     * @param  boolean $isUser
     *
     * @return array
     */
    public function getReadTemplateFile($fileName, $isUser = false)
    {
        if ($isUser) {
            $readPaths = array(
                $this->app['config']['user_data_realdir'],
            );
        } else {
            $readPaths = array(
                $this->app['config']['template_realdir'],
                $this->app['config']['template_default_realdir'],
            );
        }
    
        foreach ($readPaths as $readPath) {
            $filePath = $readPath . '/' . $fileName . '.twig';
            $fs = new Filesystem();
            if ($fs->exists($filePath)) {
                return array(
                    'file_name' => $fileName,
                    'tpl_data' => file_get_contents($filePath),
                );
            }
        }
    }
}
